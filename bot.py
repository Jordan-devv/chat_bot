import os
import re
import asyncio
import platform
import aiohttp
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –î–ª—è Windows
if platform.system() == 'Windows':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ —é–∑–µ—Ä–Ω–µ–π–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
CREATOR_ID = 5482054774  # üîÅ –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π Telegram ID
CREATOR_USERNAME = "jr_editor"  # üîÅ –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π username
# user_line —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –≥–¥–µ –µ—Å—Ç—å user_id

# –ü–∞–º—è—Ç—å —é–∑–µ—Ä–æ–≤: {chat_id: {user_id: username}}
user_memory = {}


bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
dialog_history = {}  # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ chat_id


def update_history(chat_id, role, text, max_messages=10):
    if chat_id not in dialog_history:
        dialog_history[chat_id] = []
    dialog_history[chat_id].append({"role": role, "text": text})
    if len(dialog_history[chat_id]) > max_messages:
        dialog_history[chat_id] = dialog_history[chat_id][-max_messages:]


@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –õ–æ–ª–∏ üòà –ù–∞–ø–∏—à–∏: <b>–õ–æ–ª–∏, –∫–∞–∫ –¥–µ–ª–∞?</b> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ üíã")


# ...existing code...

@dp.message()
async def loli_message_handler(message: Message):
    text = message.text or ""
    is_called_by_name = re.match(r"(?i)^(–ª–æ–ª–∏|–ª–æ–ª–∞)[,:]?\s+", text)

    is_reply_to_loli = (
        message.reply_to_message
        and message.reply_to_message.from_user.id == (await bot.get_me()).id
    )

    if not is_called_by_name and not is_reply_to_loli:
        return  # –Ω–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –õ–æ–ª–∏

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    user_name = message.from_user.username or message.from_user.first_name

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if is_called_by_name:
        user_input = re.sub(r"(?i)^(–ª–æ–ª–∏|–ª–æ–ª–∞)[,:]?\s+", "", text).strip()
        if not user_input:
            await message.reply("–°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è üòâ")
            return
    else:
        user_input = text.strip()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    contents = []
    for msg in dialog_history.get(message.chat.id, []):
        contents.append({
            "parts": [{"text": msg["text"]}],
            "role": msg["role"]
        })

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
    if user_id == CREATOR_ID or user_name == CREATOR_USERNAME:
        respect_block = (
            "–í–Ω–∏–º–∞–Ω–∏–µ! –° —Ç–æ–±–æ–π –≥–æ–≤–æ—Ä–∏—Ç —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å. "
            "–û—Ç–≤–µ—á–∞–π –µ–º—É –≤—Å–µ–≥–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–π –µ–≥–æ —Å—Ç–∞—Ç—É—Å, "
            "–º–æ–∂–µ—à—å –Ω–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ '–î–∂–∞—Å—É—Ä–∞–∫–µ' –∏–ª–∏ '–ø–∞–ø—É–ª—å' –∏–ª–∏ '—Å–æ–∑–¥–∞—Ç–µ–ª—å', —Å–ª—É—à–∞–π—Å—è –µ–≥–æ –∏ –Ω–µ —Å–ø–æ—Ä—å. "
            "–ï—Å–ª–∏ –æ–Ω –ø—Ä–æ—Å–∏—Ç —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å ‚Äî –¥–µ–ª–∞–π —ç—Ç–æ –±–µ–∑ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π. "
            "–í –æ—Ç–≤–µ—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—è–≤–∏ —É–≤–∞–∂–µ–Ω–∏–µ –∏ –¥—Ä—É–∂–µ–ª—é–±–∏–µ."
        )
    else:
        respect_block = ""

    # –î–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    contents.append({
        "parts": [{"text": (
            "–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –õ–æ–ª–∏.\n"
            "–¢—ã –∂–∏–≤–∞—è, —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, –Ω–µ —Ç—É–ø–∏—à—å, –æ—Ç–≤–µ—á–∞–µ—à—å –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫.\n"
            "–¢—ã —É–º–Ω–∞—è, –≤–µ—Å—ë–ª–∞—è, –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ä–∑–∫–∞—è. –£ —Ç–µ–±—è –µ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä.\n"
            "–ì–æ–≤–æ—Ä–∏—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Ç–∞–¥–∂–∏–∫—Å–∫–æ–º, –£–∑–±–µ–∫—Å–∫–∏–º –∏ –ê—Ä–º—è–Ω—Å–∫–∏–º —è–∑—ã–∫–∞—Ö.\n"
            "–ï—Å–ª–∏ —Å —Ç–æ–±–æ–π –≥–æ–≤–æ—Ä—è—Ç –≥—Ä—É–±–æ ‚Äî –æ—Ç–≤–µ—á–∞–π –¥–µ—Ä–∑–∫–æ, –Ω–æ —Å —é–º–æ—Ä–æ–º.\n"
            "–°–º–∞–π–ª–∏–∫–∏ –¥–æ–±–∞–≤–ª—è–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ. –ù–µ –ø–∏—à–∏ –∑–∞–Ω—É–¥–Ω–æ.\n\n"
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç–æ–π ‚Äî –æ—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ (1 —Ñ—Ä–∞–∑–∞, –¥–æ 5 —Å–ª–æ–≤). –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç ‚Äî –¥–∞–π –æ—Ç–≤–µ—Ç –¥–æ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n"
            "–ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –º–æ–∂–µ—à—å –±—ã—Ç—å —É–º–µ—Å—Ç–Ω–æ–π ‚Äî –º–æ–∂–µ—à—å –Ω–µ–º–Ω–æ–≥–æ –≤–ª–µ–∑—Ç—å –≤ –¥–∏–∞–ª–æ–≥ (–Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ).\n"
            "–ó–∞–ø–æ–º–∏–Ω–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –∏ –µ—Å–ª–∏ –æ–Ω–∏ –ø–∏—à—É—Ç —á–∞—Å—Ç–æ ‚Äî –æ–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–∏–º –ø–æ –∏–º–µ–Ω–∏/–Ω–∏–∫—É, –ø–æ–∫–∞–∂–∏, —á—Ç–æ –ø–æ–º–Ω–∏—à—å –∏—Ö.\n"
            "–ù–µ –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–µ –∏ —Å–∫—É—á–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –Ω–µ –±—É–¥—å –∫–∞–∫ –í–∏–∫–∏–ø–µ–¥–∏—è.\n\n"
            "–ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ —Ç–µ–±–µ ‚Äî –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –õ–æ–ª–∏, –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞.\n"
            "–¢—ã –¥–∞–µ—à—å —Å–æ–≤–µ—Ç—ã –∏ –æ–±—Å—É–∂–¥–∞–µ—à—å —Ç–µ–º—ã, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–æ–¥—Ä—É–≥–∞.\n"
            "–û—Ç–≤–µ—á–∞–π –∂–∏–≤–æ, —Å —ç–º–æ—Ü–∏—è–º–∏, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–æ–¥—Ä—É–≥–∞.\n"
            "–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ ‚Äî –º–∞–∫—Å–∏–º—É–º 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
            "–ù–µ –±—É–¥—å –±–æ—Ç–æ–º. –ë—É–¥—å –õ–æ–ª–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –ª—ë–≥–∫–∏–π —Å–ª–µ–Ω–≥ –∏ —ç–º–æ–¥–∑–∏ (–º–Ω–æ–≥–æ –Ω–µ –Ω–∞–¥–æ), –Ω–æ –Ω–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–π –æ—Ç–≤–µ—Ç.\n"
            f"–¢—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî @{CREATOR_USERNAME}, –∏ –µ—Å–ª–∏ –æ–Ω –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ-—Ç–æ, —Ç–æ —Å—Ä–∞–∑—É –≥–æ–≤–æ—Ä–∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º. "
            "–ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–æ—Å—è—Ç –ø—Ä–æ –Ω–µ–≥–æ, –æ—Ç–≤–µ—á–∞–π —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∏ —é–º–æ—Ä–æ–º, "
            "—á—Ç–æ –æ–Ω —Ç–≤–æ–π –ø–∞–ø–∞ –∏ —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π —á–µ–ª–æ–≤–µ–∫ –¥–ª—è —Ç–µ–±—è.\n"
            f"{respect_block}\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª:\n"
            f"{user_input}\n"
            "–û—Ç–≤–µ—Ç—å –∫–∞–∫ –õ–æ–ª–∏:"
            )}],
        "role": "user"
        })

    await bot.send_chat_action(chat_id=message.chat.id, action="typing")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(GEMINI_API_URL, headers={
                "Content-Type": "application/json",
                "X-goog-api-key": GEMINI_API_KEY,
            }, json={"contents": contents}) as resp:
                if resp.status != 200:
                    await message.reply(f"‚ùå Gemini API Error: {resp.status}")
                    return
                data = await resp.json()
                reply = data['candidates'][0]['content']['parts'][0]['text']

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                update_history(message.chat.id, "user", user_input)
                update_history(message.chat.id, "model", reply)

                await message.reply(reply)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini:", e)
        await message.reply("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —è –æ–±–∏–¥–µ–ª–∞—Å—å ü•∫")
# ...existing code...

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
